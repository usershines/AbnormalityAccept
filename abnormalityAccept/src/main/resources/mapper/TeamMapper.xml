<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.abnormality.abnormalityaccept.mapper.TeamMapper">
    <!-- 基础结果映射：实体类属性与数据库字段对应 -->
    <resultMap id="Base_Team_List" type="com.abnormality.abnormalityaccept.entity.Team">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="status" column="status"/>
        <result property="resolvingQuestId" column="resolving_quest_id"/>
        <result property="level" column="level"/>
        <result property="description" column="description"/>
        <result property="leaderId" column="leader_id"/>
    </resultMap>

    <!-- 基础字段SQL片段（复用查询字段） -->
    <sql id="Base_Team">
        id, name, status, resolving_quest_id, level, description, leader_id
    </sql>

    <!-- 1. 查询所有团队 -->
    <select id="findAllTeam" resultMap="Base_Team_List">
        SELECT
        <include refid="Base_Team"/>
        FROM team
    </select>

    <!-- 2. 根据ID查询团队 -->
    <select id="findTeamById" resultMap="Base_Team_List">
        SELECT
        <include refid="Base_Team"/>
        FROM team
        WHERE id = #{id}
    </select>

    <!-- 3. 添加团队 -->
    <insert id="addTeam">
        INSERT INTO team(name, status, resolving_quest_id, level, description, leader_id)
        VALUES(#{name}, #{status}, #{resolvingQuestId}, #{level}, #{description}, #{leaderId})
    </insert>

    <!-- 4. 更新团队 -->
    <update id="updateTeam">
        UPDATE team
        SET name = #{name},
            status = #{status},
            resolving_quest_id = #{resolvingQuestId},
            level = #{level},
            description = #{description},
            leader_id = #{leaderId}
        WHERE id = #{id}
    </update>

    <!-- 5. 根据ID删除团队 -->
    <delete id="deleteTeamById">
        DELETE FROM team
        WHERE id = #{id}
    </delete>

    <!-- ============== 拓展方法实现 ============== -->

    <!-- 6. 条件查询团队（动态SQL） -->
    <select id="findTeamByCondition" resultMap="Base_Team_List">
        SELECT
        <include refid="Base_Team"/>
        FROM team
        <where>
            <if test="name != null and name != ''">
                AND name LIKE CONCAT('%', #{name}, '%')
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
            <if test="level != null">
                AND level = #{level}
            </if>
            <if test="resolvingQuestId != null">
                AND resolving_quest_id = #{resolvingQuestId}
            </if>
            <if test="leaderId != null">
                AND leader_id = #{leaderId}
            </if>
        </where>
    </select>
    <!-- 校验名称唯一性 -->
    <select id="countByName" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM team WHERE name = #{name}
    </select>

    <!-- 更新团队任务ID -->
    <update id="updateQuestId">
        UPDATE team SET resolving_quest_id = #{questId} WHERE id = #{teamId}
    </update>

    <!-- 更新团队状态 -->
    <update id="updateStatus">
        UPDATE team SET status = #{status} WHERE id = #{teamId}
    </update>

    <!-- 添加成员到团队（关联表） -->
    <insert id="insertMember">
        INSERT INTO team_member (team_id, user_id) VALUES (#{teamMember.teamId}, #{teamMember.userId})
    </insert>

    <!-- 移除团队成员 -->
    <delete id="deleteMember">
        DELETE FROM team_member WHERE team_id = #{teamId} AND user_id = #{userId}
    </delete>

    <!-- 校验成员是否在团队中 -->
    <select id="checkMemberExists" resultType="java.lang.Boolean">
        SELECT COUNT(*) > 0 FROM team_member WHERE team_id = #{teamId} AND user_id = #{userId}
    </select>

    <!-- 查询团队成员 -->
    <select id="findMembersByTeamId" resultType="com.abnormality.abnormalityaccept.entity.User">
        SELECT u.* FROM user u
                            JOIN team_member tm ON u.id = tm.user_id
        WHERE tm.team_id = #{teamId}
    </select>
</mapper>